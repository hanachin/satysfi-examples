@require: list
@import: sequence

module Kansuji : sig
  direct \kansujichar0 : [inline-text] inline-cmd
  direct \kansujichar1 : [inline-text] inline-cmd
  direct \kansujichar2 : [inline-text] inline-cmd
  direct \kansujichar3 : [inline-text] inline-cmd
  direct \kansujichar4 : [inline-text] inline-cmd
  direct \kansujichar5 : [inline-text] inline-cmd
  direct \kansujichar6 : [inline-text] inline-cmd
  direct \kansujichar7 : [inline-text] inline-cmd
  direct \kansujichar8 : [inline-text] inline-cmd
  direct \kansujichar9 : [inline-text] inline-cmd
  direct \kansuji : [int] inline-cmd
end = struct
  let-mutable kansujichar0 <- {〇}
  let-mutable kansujichar1 <- {一}
  let-mutable kansujichar2 <- {二}
  let-mutable kansujichar3 <- {三}
  let-mutable kansujichar4 <- {四}
  let-mutable kansujichar5 <- {五}
  let-mutable kansujichar6 <- {六}
  let-mutable kansujichar7 <- {七}
  let-mutable kansujichar8 <- {八}
  let-mutable kansujichar9 <- {九}

  let-inline \kansujichar0 inner = let () = kansujichar0 <- inner in {}
  let-inline \kansujichar1 inner = let () = kansujichar1 <- inner in {}
  let-inline \kansujichar2 inner = let () = kansujichar2 <- inner in {}
  let-inline \kansujichar3 inner = let () = kansujichar3 <- inner in {}
  let-inline \kansujichar4 inner = let () = kansujichar4 <- inner in {}
  let-inline \kansujichar5 inner = let () = kansujichar5 <- inner in {}
  let-inline \kansujichar6 inner = let () = kansujichar6 <- inner in {}
  let-inline \kansujichar7 inner = let () = kansujichar7 <- inner in {}
  let-inline \kansujichar8 inner = let () = kansujichar8 <- inner in {}
  let-inline \kansujichar9 inner = let () = kansujichar9 <- inner in {}

  let split-into-chars s =
    let len = string-length s in
    (seq-int 0 (len - 1)) |> List.map (fun i -> string-sub s i 1)

  let to-inline-text c =
    match c with
    | `0` -> !kansujichar0
    | `1` -> !kansujichar1
    | `2` -> !kansujichar2
    | `3` -> !kansujichar3
    | `4` -> !kansujichar4
    | `5` -> !kansujichar5
    | `6` -> !kansujichar6
    | `7` -> !kansujichar7
    | `8` -> !kansujichar8
    | `9` -> !kansujichar9
    |  _  -> {謎}

  let-inline \kansuji x =
    (split-into-chars (arabic x)) |> List.fold-left (fun acc c -> (
      let kc = to-inline-text c in
      {#acc;#kc;}
    )) {}
end
